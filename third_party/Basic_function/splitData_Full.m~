%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% File: splitData_v02.m
%%% Spiliting data for unbalanced data 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [trainingIdx, testingIdx, label] = splitData_Full(label,  foldsPermut, per , ClassOption)

%%% Parameters
nFolds = size(foldsPermut,1);
nTry = size(foldsPermut,2);
labelOriginal = label ; 
%%% Find what are the label
labels = unique(label);


    % % %%% Convert the sparse matrix to full matrix
    % % data = full(data); 
    % % %%% Normalize the data between 0 and 1
    % % data = mat2gray(data); 
    %%% Sort the label   
    % % %%% Reorganize the data regarding the index
    % % data = (data(idxFull,:));

%%% Clear data
clear idxFull;


if strcmpi (ClassOption, 'M_D')
        %%% Replace the label by -1 and 1
        label(label==labels(1)) = 0;
        label(label==labels(2)) = -1;
        label(label==labels(3)) = 1;
%         [label, idxFull] = sort(label);
                
        %%% Find the index which is splitting the dataset -1;1

        idxLimit = find(labelOriginal==2, 1, 'first');
        idxLimit2 = find(labelOriginal==1, 1, 'first');

        %%% Make cross-validation on negative example
        idxPos = crossvalind('Kfold', label(1:idxLimit-1), nFolds);
        
        %%% Make cross-validation on positive example
        idxNeg = crossvalind('Kfold', label(idxLimit:idxLimit2-1), nFolds);
        lengthPos = length(idxPos); 
        lengthNeg = length(idxNeg); 
%         class1Instances = ceil((length(idxPos)/10)*per) ; 
%         class2Instances = ceil((length(idxNeg)/10)*per) ; 
        class1Instances = 58 ; 
        class2Instances = 58 ; 
        Remclass1Instances = 196 - class1Instances; 
        Remclass2Instances = 196 - class2Instances;
        
        trainingIdx = zeros(class1Instances + class2Instances,10);
        testingIdx = zeros(Remclass1Instances + Remclass2Instances,10);
        
        PosMatrix = zeros(length(idxPos), nTry); 
        NegMatrix = zeros(length(idxNeg), nTry); 
        for i = 1 : nTry 
        temArrayPos = []; 
        temArrayNeg = []; 
            for j = 1 : size(foldsPermut,2)
                temArrayPos = [temArrayPos; find(idxPos == foldsPermut(j,i))]; 
                temArrayNeg = [temArrayNeg; find(idxNeg == foldsPermut(j,i)) + (idxLimit-1)]; 
            end
            PosMatrix(:,i) = temArrayPos; 
            NegMatrix(:, i) = temArrayNeg; 
        end 
        
        trainingIdx(1:class1Instances,:) = PosMatrix(1:class1Instances, :); 
        trainingIdx(class1Instances+1 : end, :) = NegMatrix(1:class2Instances, :); 
               
        testingIdx(1:Remclass1Instances, : ) = PosMatrix(class1Instances+1:end, :); 
        testingIdx(Remclass1Instances+1 : end , :) = NegMatrix(class2Instances+1 : end, :); 
        
%         for i = 1 : nTry 
% 
%             %%% Training Idx 
%             idxFoldsPermut = foldsPermut(i,1:per);
%             tmp = [];
%             tmpPos = []; 
%             tmpNeg  = [];         
%             for j = 1:length(idxFoldsPermut)
%                 % tmp = [tmp ; find(idxNeg==idxFoldsPermut(j)) ; find(idxPos==idxFoldsPermut(j))+(idxLimit-1)];
%                 tmpNeg  = [tmpNeg ; find(idxNeg==idxFoldsPermut(j))+(idxLimit-1) ]; 
%                 tmpPos =  [tmpPos; find(idxPos==idxFoldsPermut(j))];
%             end
%             tmpNegPrimer = tmpNeg(1: length(trainingIdx)/2); 
%             tmp = [tmp; tmpPos; tmpNegPrimer]; 
%             remtemNeg = tmpNeg(length(trainingIdx)/2+1:end); 
%             trainingIdx(1:numel(tmp),i) = tmp;
% 
%             %%% TestingIdx 
% 
%             idxFoldsPermut = foldsPermut(i,per+1:10);
%             tmpNeg = [];
%             tmpPos = []; 
%             tmp = []; 
%             
%             for j = 1 : length(idxFoldsPermut)
%                 tmpNeg = [tmpNeg ; find(idxNeg == idxFoldsPermut(j)) + (idxLimit-1)]; 
%                 tmpPos = [tmpPos ; find(idxPos == idxFoldsPermut(j))]; 
%             end 
%             tmp = [tmp; tmpNeg; remtemNeg; tmpPos]; 
%             testingIdx(1: numel(tmp), i) = tmp; 
%             
% 
%         end 

   elseif  strcmpi(ClassOption, 'M_DB')
        
        label(label==labels(1)) = -1;
        label(label==labels(2)) = -1;
        label(label == labels(3)) = 1 ; 
%         [label, idxFull] = sort(label);
%         
        %%% Find the index which is splitting the dataset class1,2 and 3 
        idxLimit1 = find(labelOriginal==2, 1, 'first');
        idxLimit2 = find(labelOriginal ==1, 1, 'first'); 
             
        %%% Make cross-validation on negative example
        idxPos = crossvalind('Kfold', labelOriginal(1:idxLimit1-1), nFolds);

        %%% Make cross-validation on positive example
        idxNeg1 = crossvalind('Kfold', labelOriginal(idxLimit1:idxLimit2-1), nFolds);
        idxNeg2 = crossvalind('Kfold', labelOriginal(idxLimit2: end), nFolds); 
        
        
%         class1Instances = ceil((length(idxPos)/10)*per) ; 
%         class2Instances1 = ceil((length(idxNeg1)/10)*per); 
%         class2Instances2 = ceil((length(idxNeg2)/10)*per); 

        class1Instances = 58 ; 
        class2Instances1 = 58; 
        class2Instances2 = 58; 
        
        lengthPos = length(idxPos); 
        lengthNeg1 = length(idxNeg1); 
        lengthNeg2 = length(idxNeg2); 
        
        Remclass1Instances = lengthPos - class1Instances ; 
        Remclass2Instances1 = lengthNeg1 - class2Instances1; 
        Remclass2Instances2 = lengthNeg2 - class2Instances2; 
        
        
        trainingIdx = zeros(class1Instances + class2Instances1 + class2Instances2, 10); 
        testingIdx = zeros(Remclass1Instances + Remclass2Instances1 + Remclass2Instances2, 10);
        
        PosMatrix = zeros(length(idxPos), nTry); 
        Neg1Matrix = zeros(length(idxNeg1), nTry); 
        Neg2Matrix = zeros(length(idxNeg2), nTry); 
        for i = 1 : nTry 
        temArrayPos = []; 
        temArrayNeg1 = [];
        temArrayNeg2 = []; 
            for j = 1 : size(foldsPermut,2)
                temArrayPos = [temArrayPos; find(idxPos == foldsPermut(j,i))]; 
                temArrayNeg1 = [temArrayNeg1; find(idxNeg1 == foldsPermut(j,i))+ (idxLimit1-1)]; 
                temArrayNeg2 = [temArrayNeg2; find(idxNeg2 == foldsPermut(j,i)) + (idxLimit2-1)]; 
            end
            PosMatrix(:,i) = temArrayPos; 
            Neg1Matrix(:,i) = temArrayNeg1; 
            Neg2Matrix(:,i) = temArrayNeg2; 
        end 
        
        fIndex = 1 ; lIndex = class1Instances;   
        trainingIdx(fIndex:lIndex, :) = PosMatrix(1:class1Instances, :); 
        fIndex = lIndex + 1; lIndex = lIndex + class2Instances1 ; 
        trainingIdx(fIndex:lIndex , :) = Neg1Matrix(1 : class2Instances1, :);
        fIndex = lIndex+1 ; lIndex = lIndex + class2Instances2; 
        trainingIdx(fIndex: end, :) = Neg2Matrix(1:class2Instances2, :); 
        
        
        fIndex = 1 ; lIndex = Remclass1Instances ; 
        testingIdx(fIndex:lIndex,:) = PosMatrix(class1Instances+1:end, :); 
        fIndex = lIndex+1 ;  lIndex = lIndex + Remclass2Instances1 ; 
        testingIdx(fIndex : lIndex, :) = Neg1Matrix(class2Instances1+1 : end, :); 
        fIndex = lIndex +1 ; 
        testingIdx(fIndex : end, :) = Neg2Matrix(class2Instances2+1: end, :); 
        
        
    elseif strcmpi (ClassOption, 'MD_B')
        
        label(label==labels(1)) = -1;
        label(label==labels(2)) = 1;
        label(label == labels(3)) = 1 ; 
                
        
        %%% Find the index which is splitting the dataset class1,2 and 3 
        idxLimit1 = find(labelOriginal==2, 1, 'first');
        idxLimit2 = find(labelOriginal ==1, 1, 'first'); 
             
        
        %%% Make cross-validation on positive example
        idxPos1 = crossvalind('Kfold', labelOriginal(1:idxLimit1-1), nFolds);
        idxPos2 = crossvalind('Kfold', labelOriginal(idxLimit1:idxLimit2-1), nFolds);

        %%% Make cross-validation on negative example        
        idxNeg = crossvalind('Kfold', labelOriginal(idxLimit2: end), nFolds); 
        
        
                
        class1Instances1 = 45 ; 
        class1Instances2 = 45; 
        class2Instances = 90; 
        
        lengthPos1 = length(idxPos1); 
        lengthPos2 = length(idxPos2); 
        lengthNeg = length(idxNeg); 
        
        Remclass1Instances1 = lengthPos1 - class1Instances1 ; 
        Remclass1Instances2 = lengthPos2 - class1Instances2 ; 
        Remclass2Instances = lengthNeg - class2Instances ; 
        
        trainingIdx = zeros(class1Instances1 + class1Instances2 + class2Instances, 10); 
        testingIdx = zeros(Remclass1Instances1 + Remclass1Instances2 + Remclass2Instances, 10); 
        
        Pos1Matrix = zeros(length(idxPos1), nTry); 
        Pos2Matrix = zeros(length(idxPos2), nTry); 
        NegMatrix = zeros(length(idxNeg), nTry); 
        for i = 1 : nTry 
        temArrayPos1 = []; 
        temArrayPos2 = [];
        temArrayNeg = []; 
            for j = 1 : size(foldsPermut,2)
                temArrayPos1 = [temArrayPos1; find(idxPos1 == foldsPermut(j,i))]; 
                temArrayPos2 = [temArrayPos2; find(idxPos2 == foldsPermut(j,i))+ (idxLimit1-1)]; 
                temArrayNeg = [temArrayNeg; find(idxNeg == foldsPermut(j,i)) + (idxLimit2-1)]; 
            end
            Pos1Matrix(:,i) = temArrayPos1; 
            Pos2Matrix(:,i) = temArrayPos2; 
            NegMatrix(:,i) = temArrayNeg; 
        end 

        
        fIndex = 1 ; lIndex = class1Instances1; 
        trainingIdx(fIndex : lIndex , :) = Pos1Matrix(1:class1Instances1, :);
        fIndex = lIndex + 1;  lIndex = lIndex + class1Instances2 ; 
        trainingIdx(fIndex : lIndex, :) = Pos2Matrix(1:class1Instances2, :); 
        fIndex = lIndex +1 ; 
        trainingIdx(fIndex: end, :) = NegMatrix(1:class2Instances, :); 
        
        fIndex = 1 ; lIndex = Remclass1Instances1; 
        testingIdx(fIndex: lIndex, :) = Pos1Matrix(class1Instances1 +1 : end , :); 
        fIndex = lIndex + 1;  lIndex = lIndex + Remclass1Instances2;  
        testingIdx(fIndex: lIndex, :) = Pos2Matrix(class1Instances2 +1 : end , :); 
        fIndex = lIndex +1 ; 
        testingIdx(fIndex: end , :) = NegMatrix(class2Instances+1: end , :); 
        
       

        

elseif  strcmpi(ClassOption, 'D_B_M')
     % Note,idx1 represent Melanoma insta
        
%         label(label==labels(1)) = -1;
%         label(label==labels(2)) = 1;
%         label(label == labels(3)) = -1 ; 
%         [label, idxFull] = sort(label);
%         
        %%% Find the index which is splitting the dataset class1,2 and 3 
        idxLimit1 = find(labelOriginal==2, 1, 'first');
        idxLimit2 = find(labelOriginal ==1, 1, 'first'); 
             
        %%% Make cross-validation on negative and positive samples
        idx1 = crossvalind('Kfold', labelOriginal(1:idxLimit1-1), nFolds); 
        idx2= crossvalind('Kfold', labelOriginal(idxLimit1:idxLimit2-1), nFolds);
        idx3= crossvalind('Kfold', labelOriginal(idxLimit2: end), nFolds); 
        
        
%         class1Instances = ceil((length(idxPos)/10)*per) ; 
%         class2Instances1 = ceil((length(idxNeg1)/10)*per); 
%         class2Instances2 = ceil((length(idxNeg2)/10)*per); 

        class1Instances1 = 70 ; 
        class2Instances2 = 70; 
        class2Instances3 = 70; 
        
        length1 = length(idx1); 
        length2 = length(idx2); 
        length3 = length(idx3); 
        
        Remclass1Instances1 = length1 - class1Instances1 ; 
        Remclass2Instances2 = length2 - class2Instances2; 
        Remclass2Instances3 = length3 - class2Instances3; 
        
        
        trainingIdx = zeros(class1Instances1 + class2Instances2 + class2Instances3, 10); 
        testingIdx = zeros(Remclass1Instances1 + Remclass2Instances2 + Remclass2Instances3, 10);
        
        Matrix1 = zeros(length(idx1), nTry); 
        Matrix2 = zeros(length(idx2), nTry); 
        Matrix3 = zeros(length(idx3), nTry); 
        for i = 1 : nTry 
        temArray1 = []; 
        temArray2 = [];
        temArray3 = []; 
            for j = 1 : size(foldsPermut,2)
                temArray1= [temArray1; find(idx1 == foldsPermut(j,i))]; 
                temArray2 = [temArray2; find(idx2 == foldsPermut(j,i))+ (idxLimit1-1)]; 
                temArray3 = [temArray3; find(idx3 == foldsPermut(j,i)) + (idxLimit2-1)]; 
            end
            Matrix1(:,i) = temArray1; 
            Matrix2(:,i) = temArray2; 
            Matrix3(:,i) = temArray3; 
        end 
        
        fIndex = 1 ; lIndex = class1Instances;   
        trainingIdx(fIndex:lIndex, :) = PosMatrix(1:class1Instances, :); 
        fIndex = lIndex + 1; lIndex = lIndex + class2Instances1 ; 
        trainingIdx(fIndex:lIndex , :) = Neg1Matrix(1 : class2Instances1, :);
        fIndex = lIndex+1 ; lIndex = lIndex + class2Instances2; 
        trainingIdx(fIndex: end, :) = Neg2Matrix(1:class2Instances2, :); 
        
        
        fIndex = 1 ; lIndex = Remclass1Instances ; 
        testingIdx(fIndex:lIndex,:) = PosMatrix(class1Instances+1:end, :); 
        fIndex = lIndex+1 ;  lIndex = lIndex + Remclass2Instances1 ; 
        testingIdx(fIndex : lIndex, :) = Neg1Matrix(class2Instances1+1 : end, :); 
        fIndex = lIndex +1 ; 
        testingIdx(fIndex : end, :) = Neg2Matrix(class2Instances2+1: end, :); 
        
        
      
  end 




 