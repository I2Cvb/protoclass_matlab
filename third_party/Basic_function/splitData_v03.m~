%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% File: splitData_v02.m
%%% Spiliting data for unbalanced data 
%%% In version 03, we select the indices for smaller datasets 
%%% M_D = 180 data (90M, 90D, Train = 63M + 63D, Test = 27M + 27D); 
%%% M_DB = 180 data (90M, (45D, 45B), Train = 63M + 30D + 33B,  Test = 27 M + 15 D + 12 B); 
%%% MD_B = 360 data ((90M + 90D) , 90 B, Train = 45M + 45D + 90B , Test =
%%% 45 M + 45D + 90 B); 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [trainingIdx, testingIdx, label] = splitData_v03(label,  foldsPermut, per , ClassOption)

%%% Parameters
nFolds = size(foldsPermut,1);
nTry = size(foldsPermut,2);
labelOriginal = label ; 
%%% Find what are the label
labels = unique(label);


    % % %%% Convert the sparse matrix to full matrix
    % % data = full(data); 
    % % %%% Normalize the data between 0 and 1
    % % data = mat2gray(data); 
    %%% Sort the label   
    % % %%% Reorganize the data regarding the index
    % % data = (data(idxFull,:));

%%% Clear data
clear idxFull;



    if strcmpi (ClassOption, 'M_D')
        %%% datasize = 180,  
        
        %%% Replace the label by -1 and 1
        label(label==labels(1)) = -1;
        label(label==labels(2)) = 1;
%         [label, idxFull] = sort(label);
                
        %%% Find the index which is splitting the dataset -1;1
        idxLimit = find(labelOriginal==labels(1), 1, 'first');

        %%% Make cross-validation on negative example
        idxPos = crossvalind('Kfold', label(1:idxLimit-1), nFolds);

        %%% Make cross-validation on positive example
        idxNeg = crossvalind('Kfold', label(idxLimit:end), nFolds);
        
        
        class1Instances = (length(idxPos)/10)*per ; 
        trainingIdx = zeros(2*class1Instances,10);
        testingIdx = zeros(180 - (2*class1Instances),10); 
        
        PosMatrix = zeros(length(idxPos), nFolds); 
        NegMatrix = zeros(length(idxNeg), nFolds); 
        
        for i = 1 : nTry 
        temArrayPos = []; 
        temArrayNeg = []; 
            for j = 1 : size(foldsPermut,2)
                temArrayPos = [temArrayPos; find(idxPos == foldsPermut(j,i))]; 
                temArrayNeg = [temArrayNeg; find(idxNeg == foldsPermut(j,i)) + (idxLimit-1)]; 
            end
            PosMatrix(:,i) = temArrayPos; 
            NegMatrix(:,i) = temArrayNeg; 
        end 
        
        fIndex = 1 ; lIndex = class1Instances/2 ; 
        trainingIdx(fIndex :lIndex, :) = PosMatrix(1: class1Instances/2, :); 
        fIndex = lIndex + 1 ; lIndex = lIndex + class1Instances/2; 
        trainingIdx(fIndex :lIndex, :) = NegMatrix(1:class1Instances/2, :); 
        
        fIndex = 1 ; lIndex = size(PosMatrix,1) - class1Instances/2; 
        testingIdx(fIndex:lIndex, :) = PosMatrix(class1Instances/2 +1 : end , :); 
        fIndex = lIndex +1 ; 
        testingIdx(fIndex : end, : ) = NegMatrix(class1Instances/2: (class1Instances/2 + 50), :); 
        
        
%         for i = 1 : nTry 
% 
%             %%% Training Idx 
%             idxFoldsPermut = foldsPermut(i,1:per);
%             tmp = [];
%             tmpPos = []; 
%             tmpNeg  = [];         
%             for j = 1:length(idxFoldsPermut)
%                 % tmp = [tmp ; find(idxNeg==idxFoldsPermut(j)) ; find(idxPos==idxFoldsPermut(j))+(idxLimit-1)];
%                 tmpNeg  = [tmpNeg ; find(idxNeg==idxFoldsPermut(j))+(idxLimit-1) ]; 
%                 tmpPos =  [tmpPos; find(idxPos==idxFoldsPermut(j))];
%             end
%             tmpNegPrimer = tmpNeg(1: length(trainingIdx)/2); 
%             tmp = [tmp; tmpPos; tmpNegPrimer]; 
%             remtemNeg = tmpNeg(length(trainingIdx)/2+1:end); 
%             trainingIdx(1:numel(tmp),i) = tmp;
% 
%             %%% TestingIdx 
% 
%             idxFoldsPermut = foldsPermut(i,per+1:10);
%             tmpNeg = [];
%             tmpPos = []; 
%             tmp = []; 
%             for j = 1:length(idxFoldsPermut)
%                 tmpNeg  = [tmpNeg ; find(idxNeg==idxFoldsPermut(j))+ (idxLimit-1)]; 
%                 tmpPos =  [tmpPos; find(idxPos==idxFoldsPermut(j))];
%                 %  tmp = [tmp ; find(idxNeg==idxFoldsPermut(j)) ; find(idxPos==idxFoldsPermut(j))+(idxLimit-1)];
%             end
%             totalNeg = []; 
%             totalNeg = [totalNeg; remtemNeg; tmpNeg]; 
%             
%             tmp = [tmp; totalNeg(1:27); tmpPos]; 
%             testingIdx(1:numel(tmp),i) = tmp;
%         end 

    elseif strcmpi(ClassOption, 'M_DB')
        
        label(label==labels(1)) = -1;
        label(label==labels(2)) = -1;
        label(label == labels(3)) = 1 ; 
%         [label, idxFull] = sort(label);
%         
        %%% Find the index which is splitting the dataset class1,2 and 3 
        idxLimit1 = find(labelOriginal==2, 1, 'first');
        idxLimit2 = find(labelOriginal ==1, 1, 'first'); 
             
        %%% Make cross-validation on negative example
        idxPos = crossvalind('Kfold', labelOriginal(1:idxLimit1-1), nFolds);

        %%% Make cross-validation on positive example
        idxNeg1 = crossvalind('Kfold', labelOriginal(idxLimit1:idxLimit2-1), nFolds);
        idxNeg2 = crossvalind('Kfold', labelOriginal(idxLimit2: end), nFolds); 
        
        
        class1Instances = (length(idxPos)/10)*per ; 
        trainingIdx = zeros(2*class1Instances, 10); 
        testingIdx = zeros(152 - length(trainingIdx), 10);
        
        PosMatrix = zeros(length(idxPos), nfolds); 
        Neg1Matrix = zeros(length(idxNeg1), nfolds); 
        Neg2Matrix  = zeros(length(idxNeg2), nfolds); 
       
        
        for i = 1 : nTry 
        temArrayPos = []; 
        temArrayNeg1 = []; 
        temArrayNeg2 = []; 
        
            for j = 1 : size(foldsPermut,2)
                temArrayPos = [temArrayPos; find(idxPos == foldsPermut(j,i))]; 
                temArrayNeg1 = [temArrayNeg1; find(idxNeg1 == foldsPermut(j,i)) + (idxLimit-1)]; 
                temArrayNeg2 = [temArrayNeg1; find(idxNeg2 == foldsPermut(j,i)) + (idxLimi2-1)]; 
            end
            PosMatrix(:,i) = temArrayPos; 
            Neg1Matrix(:,i) = temArrayNeg1; 
            Neg2Matrix(:,i) = temArrayNeg2; 
        end 
        
        fIndex = 1 ; lIndex = class1Instances ; 
        trainingIdx (fIndex :lIndex, :) = PosMatrix(1: class1Instances, :); 
        fIndex = lIndex +1 ; lIndex = lIndex + class1Instances/2; 
        trainingIdx(fIndex : lIndex , :) = Neg1Matrix(1:class1Instances/2, :); 
        fIndex = lIndex +1 ; lIndex = lIndex + class1Instances/2 ; 
        trainingIdx(fIndex : lIndex, :) = Neg2Matrix(1: class1Instances/2, :); 
        
        fIndex = 1 ; lIndex = size(PosMatrix, 1) - class1Instances; 
        testingIdx (fIndex : lIndex , :) = PosMatrix(class1Instances+1 : end, :); 
        fIndex = lIndex +1 ; lIndex = lIndex + 11 ; 
        testingIdx (fIndex : lIndex , :) = Neg1Matrix(class1Instances/2 +1 : class1Instances/2 +11, :); 
        fIndex = lIndex +1 ; 
        testingIdx (fIndex: end, :) = Neg2Matrix(class1Instances/2 +1 : class1Instances/2 +11, :); 
        
     

%         for i = 1 : nTry 
% 
%             %%% Training Idx 
%             idxFoldsPermut = foldsPermut(i,1:per);
%             tmp = [];
%             tmpPos = []; 
%             tmpNeg1  = [];  
%             tmpNeg2 = []; 
%             for j = 1:length(idxFoldsPermut)
%                 
%                 tmpPos  = [tmpPos ; find(idxPos==idxFoldsPermut(j)) ]; 
%                 tmpNeg1 =  [tmpNeg1; find(idxNeg1 ==idxFoldsPermut(j))+(idxLimit1-1)];
%                 tmpNeg2 = [tmpNeg2; find(idxNeg2 ==idxFoldsPermut(j))+ (idxLimit2-1)]; 
%             end
%             tmpNeg1Prim = tmpNeg1(1: 30); 
%             tmpNeg2Prim = tmpNeg2(1: 33); 
%             tmp = [tmp; tmpPos; tmpNeg1Prim; tmpNeg2Prim]; 
%             remtmpNeg1 = tmpNeg1(31:45); 
%             remtmpNeg2 = tmpNeg2(34:45); 
%             
%             trainingIdx(1:numel(tmp),i) = tmp;
%             clear tmp; 
%             clear tmpNeg1; clear tmpNeg2; clear tmpPos; 
% 
%             %%% TestingIdx 
% 
%             idxFoldsPermut = foldsPermut(i,per+1:10);
%             tmpNeg1 = [];
%             tmpNeg2 = []; 
%             tmpPos = []; 
%             tmp = []; 
%             for j = 1:length(idxFoldsPermut)
%                 tmpPos  =  [tmpPos ; find(idxPos==idxFoldsPermut(j)) ]; 
%                 tmpNeg1 =  [tmpNeg1; find(idxNeg1 ==idxFoldsPermut(j))+ (idxLimit1-1)];
%                 tmpNeg2 =  [tmpNeg2 ; find(idxNeg2 == idxFoldsPermut(j)) + (idxLimit2 -1)]; 
%               
%             end
%             TotalNeg1 = []; 
%             TotalNeg2 = []; 
%             TotalNeg1 = [TotalNeg1; tmpNeg1 ;remtmpNeg1; ]; 
%             TotalNeg2 = [TotalNeg2; tmpNeg2; remtmpNeg2]; 
%             tmp = [tmp; tmpPos; TotalNeg1(1:15); TotalNeg2(1:12)]; 
%             testingIdx(1:numel(tmp),i) = tmp;
%                class1Instances = (length(idxPos)/10)*per ; 
%  end 
       


    elseif strcmpi (ClassOption, 'MD_B')
        
        label(label==labels(1)) = -1;
        label(label==labels(2)) = 1;
        label(label == labels(3)) = 1 ; 
                
        
        %%% Find the index which is splitting the dataset class1,2 and 3 
        idxLimit1 = find(labelOriginal==2, 1, 'first');
        idxLimit2 = find(labelOriginal ==1, 1, 'first'); 
             
        %%% Make cross-validation on negative example
        idxPos1 = crossvalind('Kfold', labelOriginal(1:idxLimit1-1), nFolds);

        %%% Make cross-validation on positive example
        idxPos2 = crossvalind('Kfold', labelOriginal(idxLimit1:idxLimit2-1), nFolds);
        idxNeg = crossvalind('Kfold', labelOriginal(idxLimit2: end), nFolds); 
        
        
        
       
        class1Instances = (length(idxPos)/10)*per ; 
        
        trainingIdx = zeros(4*class1Instances, 10); 
%         testingIdx = zeros(360 - length(trainingIdx), 10); 
        testingIdx = zeros(4*22, 10); 
        
        Pos1Matrix = zeros(length(idxPos1), nfolds); 
        Pos2Matrix = zeros(length(idxPos2), nfolds); 
        NegMatrix  = zeros(length(idxNeg), nfolds); 
       
        
        for i = 1 : nTry 
        temArrayPos1 = []; 
        temArrayPos2 = []; 
        temArrayNeg = []; 
        
            for j = 1 : size(foldsPermut,2)
                temArrayPos1 = [temArrayPos1; find(idxPos1 == foldsPermut(j,i))]; 
                temArrayPos2 = [temArrayPos2; find(idxPos2 == foldsPermut(j,i)) + (idxLimit-1)]; 
                temArrayNeg = [temArrayNeg; find(idxNeg == foldsPermut(j,i)) + (idxLimi2-1)]; 
            end
            Pos2Matrix(:,i) = temArrayPos1; 
            Pos1Matrix(:,i) = temArrayPos2; 
            NegMatrix(:,i) = temArrayNeg; 
        end 
        
        fIndex = 1 ; lIndex = class1Instances; 
        trainingIdx (fIndex:lIndex , :) = Pos1Matrix(1:class1Instances, :); 
        fIndex = lIndex +1 ; lIndex = class1Instances + class1Instances; 
        trainingIdx(fIndex: lIndex, :) = Pos2Matrix(1:class1Instances, :); 
        fIndex = lIndex+ 1 ; 
        trainingIdx (fIndex:end, :) = NegMatrix(1:2*class1Instances, :); 
        
        fIndex = 1 ; lIndex = size(Pos1Matrix, 1) - class1Instances; 
        testingIdx (fIndex:lIndex, :) = Pos1Matrix(class1Instances+1 : end , :); 
        fIndex = lIndex +1 ; lIndex = lIndex + lIndex ; 
        testingIdx (fIndex: lIndex, :) = Pos2Matrix(class1Instances)
       

         for i = 1 : nTry 

            %%% Training Idx 
            idxFoldsPermut = foldsPermut(i,1:per);
            tmp = [];
            tmpPos1 = []; 
            tmpPos2  = [];  
            tmpNeg = []; 
            for j = 1:length(idxFoldsPermut)
                
                tmpPos1  = [tmpPos1 ; find(idxPos1==idxFoldsPermut(j)) ]; 
                tmpPos2 =  [tmpPos2; find(idxPos2 ==idxFoldsPermut(j))+(idxLimit1-1)];
                tmpNeg = [tmpNeg; find(idxNeg ==idxFoldsPermut(j))+ (idxLimit2-1)]; 
            end
            tmpPos1Prim = tmpPos1(1: 63); 
            tmpPos2Prim = tmpPos2(1: 63); 
            tmpNegPrim  = tmpNeg(1:126); 
            tmp = [tmp; tmpPos1Prim; tmpPos2Prim; tmpNegPrim]; 
            remtmpPos1 = tmpPos1(64:end); 
            remtmpPos2 = tmpPos2(64:90); 
            remtmpNeg = tmpNeg(127:180); 
            trainingIdx(1:numel(tmp),i) = tmp;
            clear tmp; 
            clear tmpPos1; clear tmpPos2; clear tmpNeg; 

            %%% TestingIdx 

            idxFoldsPermut = foldsPermut(i,per+1:10);
            tmpPos1 = [];
            tmpPos2 = []; 
            tmpNeg = []; 
            tmp = []; 
            for j = 1:length(idxFoldsPermut)
                tmpPos1  =  [tmpPos1 ; find(idxPos1==idxFoldsPermut(j)) ]; 
                tmpPos2 =  [tmpPos2; find(idxPos2 ==idxFoldsPermut(j))+ (idxLimit1-1)];
                tmpNeg =  [tmpNeg ; find(idxNeg == idxFoldsPermut(j)) + (idxLimit2 -1)]; 
              
            end
            
            TotalPos2 = []; 
            TotalPos2 = [TotalPos2;tmpPos2; remtmpPos2]; 
            TotalNeg = []; 
            TotalNeg = [TotalNeg; tmpNeg; remtmpNeg]; 
            tmp = [tmp; tmpPos1; remtmpPos1; TotalPos2(1:27); TotalNeg(1:54)]; 
            testingIdx(1:numel(tmp),i) = tmp;
        end 
       

    end



% %     %%% The pruning the two last one
% %     idxFoldsPermut = foldsPermut(i,9:10);
% %     tmp = [];
% %     for j = 1:length(idxFoldsPermut)
% %         tmp = [tmp ; find(idxNeg==idxFoldsPermut(j)) ; find(idxPos==idxFoldsPermut(j))+(idxLimit-1)];
% %     end
% %     pruningIdx(1:numel(tmp),i) = tmp;
% %     clear tmp;


    clear tmp;
end